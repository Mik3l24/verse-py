# Generated from parser/Verbose.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,67,507,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,4,0,139,8,0,11,0,12,0,140,1,0,1,
        0,1,1,1,1,1,1,1,1,5,1,149,8,1,10,1,12,1,152,9,1,1,1,1,1,1,2,5,2,
        157,8,2,10,2,12,2,160,9,2,1,2,1,2,4,2,164,8,2,11,2,12,2,165,1,3,
        4,3,169,8,3,11,3,12,3,170,1,4,1,4,1,4,1,4,4,4,177,8,4,11,4,12,4,
        178,1,5,1,5,1,5,1,5,4,5,185,8,5,11,5,12,5,186,1,6,1,6,1,6,1,6,5,
        6,193,8,6,10,6,12,6,196,9,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,10,3,10,209,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,21,3,21,234,8,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,264,8,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,
        1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,
        1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,
        489,8,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,5,66,
        501,8,66,10,66,12,66,504,9,66,1,67,1,67,0,0,68,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
        99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,
        59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,0,
        1,0,8,3,0,9,10,13,13,32,32,2,0,10,10,13,13,3,0,48,57,65,70,97,102,
        2,0,48,49,95,95,2,0,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,519,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
        0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
        115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,
        0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
        1,0,0,0,1,138,1,0,0,0,3,144,1,0,0,0,5,158,1,0,0,0,7,168,1,0,0,0,
        9,172,1,0,0,0,11,180,1,0,0,0,13,188,1,0,0,0,15,199,1,0,0,0,17,201,
        1,0,0,0,19,203,1,0,0,0,21,208,1,0,0,0,23,210,1,0,0,0,25,212,1,0,
        0,0,27,214,1,0,0,0,29,216,1,0,0,0,31,218,1,0,0,0,33,220,1,0,0,0,
        35,222,1,0,0,0,37,224,1,0,0,0,39,226,1,0,0,0,41,228,1,0,0,0,43,233,
        1,0,0,0,45,235,1,0,0,0,47,238,1,0,0,0,49,240,1,0,0,0,51,242,1,0,
        0,0,53,245,1,0,0,0,55,248,1,0,0,0,57,250,1,0,0,0,59,252,1,0,0,0,
        61,263,1,0,0,0,63,265,1,0,0,0,65,271,1,0,0,0,67,276,1,0,0,0,69,281,
        1,0,0,0,71,284,1,0,0,0,73,293,1,0,0,0,75,303,1,0,0,0,77,311,1,0,
        0,0,79,318,1,0,0,0,81,324,1,0,0,0,83,327,1,0,0,0,85,332,1,0,0,0,
        87,342,1,0,0,0,89,349,1,0,0,0,91,356,1,0,0,0,93,365,1,0,0,0,95,372,
        1,0,0,0,97,378,1,0,0,0,99,387,1,0,0,0,101,397,1,0,0,0,103,400,1,
        0,0,0,105,406,1,0,0,0,107,410,1,0,0,0,109,419,1,0,0,0,111,428,1,
        0,0,0,113,436,1,0,0,0,115,445,1,0,0,0,117,452,1,0,0,0,119,458,1,
        0,0,0,121,464,1,0,0,0,123,467,1,0,0,0,125,471,1,0,0,0,127,488,1,
        0,0,0,129,490,1,0,0,0,131,495,1,0,0,0,133,498,1,0,0,0,135,505,1,
        0,0,0,137,139,7,0,0,0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,
        0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,6,0,0,0,143,2,1,0,
        0,0,144,145,5,47,0,0,145,146,5,47,0,0,146,150,1,0,0,0,147,149,8,
        1,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,
        0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,6,1,0,0,154,4,1,0,
        0,0,155,157,3,135,67,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,
        0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,0,0,161,163,5,
        46,0,0,162,164,3,135,67,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,
        1,0,0,0,165,166,1,0,0,0,166,6,1,0,0,0,167,169,3,135,67,0,168,167,
        1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,8,1,
        0,0,0,172,173,5,48,0,0,173,174,5,120,0,0,174,176,1,0,0,0,175,177,
        7,2,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,
        1,0,0,0,179,10,1,0,0,0,180,181,5,48,0,0,181,182,5,98,0,0,182,184,
        1,0,0,0,183,185,7,3,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,
        1,0,0,0,186,187,1,0,0,0,187,12,1,0,0,0,188,194,5,34,0,0,189,193,
        8,4,0,0,190,191,5,92,0,0,191,193,9,0,0,0,192,189,1,0,0,0,192,190,
        1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,
        1,0,0,0,196,194,1,0,0,0,197,198,5,34,0,0,198,14,1,0,0,0,199,200,
        5,46,0,0,200,16,1,0,0,0,201,202,5,44,0,0,202,18,1,0,0,0,203,204,
        5,59,0,0,204,20,1,0,0,0,205,209,5,39,0,0,206,207,5,39,0,0,207,209,
        5,115,0,0,208,205,1,0,0,0,208,206,1,0,0,0,209,22,1,0,0,0,210,211,
        5,40,0,0,211,24,1,0,0,0,212,213,5,41,0,0,213,26,1,0,0,0,214,215,
        5,91,0,0,215,28,1,0,0,0,216,217,5,93,0,0,217,30,1,0,0,0,218,219,
        5,123,0,0,219,32,1,0,0,0,220,221,5,125,0,0,221,34,1,0,0,0,222,223,
        5,43,0,0,223,36,1,0,0,0,224,225,5,45,0,0,225,38,1,0,0,0,226,227,
        5,42,0,0,227,40,1,0,0,0,228,229,5,47,0,0,229,42,1,0,0,0,230,234,
        5,61,0,0,231,232,5,61,0,0,232,234,5,61,0,0,233,230,1,0,0,0,233,231,
        1,0,0,0,234,44,1,0,0,0,235,236,5,33,0,0,236,237,5,61,0,0,237,46,
        1,0,0,0,238,239,5,60,0,0,239,48,1,0,0,0,240,241,5,62,0,0,241,50,
        1,0,0,0,242,243,5,60,0,0,243,244,5,61,0,0,244,52,1,0,0,0,245,246,
        5,62,0,0,246,247,5,61,0,0,247,54,1,0,0,0,248,249,5,38,0,0,249,56,
        1,0,0,0,250,251,5,124,0,0,251,58,1,0,0,0,252,253,5,94,0,0,253,60,
        1,0,0,0,254,255,5,105,0,0,255,256,5,110,0,0,256,257,5,118,0,0,257,
        258,5,101,0,0,258,259,5,114,0,0,259,260,5,116,0,0,260,261,5,101,
        0,0,261,264,5,100,0,0,262,264,5,126,0,0,263,254,1,0,0,0,263,262,
        1,0,0,0,264,62,1,0,0,0,265,266,5,110,0,0,266,267,5,97,0,0,267,268,
        5,109,0,0,268,269,5,101,0,0,269,270,5,100,0,0,270,64,1,0,0,0,271,
        272,5,102,0,0,272,273,5,114,0,0,273,274,5,111,0,0,274,275,5,109,
        0,0,275,66,1,0,0,0,276,277,5,119,0,0,277,278,5,105,0,0,278,279,5,
        116,0,0,279,280,5,104,0,0,280,68,1,0,0,0,281,282,5,116,0,0,282,283,
        5,111,0,0,283,70,1,0,0,0,284,285,5,102,0,0,285,286,5,117,0,0,286,
        287,5,110,0,0,287,288,5,99,0,0,288,289,5,116,0,0,289,290,5,105,0,
        0,290,291,5,111,0,0,291,292,5,110,0,0,292,72,1,0,0,0,293,294,5,97,
        0,0,294,295,5,114,0,0,295,296,5,103,0,0,296,297,5,117,0,0,297,298,
        5,109,0,0,298,299,5,101,0,0,299,300,5,110,0,0,300,301,5,116,0,0,
        301,302,5,115,0,0,302,74,1,0,0,0,303,304,5,116,0,0,304,305,5,97,
        0,0,305,306,5,114,0,0,306,307,5,103,0,0,307,308,5,101,0,0,308,309,
        5,116,0,0,309,310,5,115,0,0,310,76,1,0,0,0,311,312,5,116,0,0,312,
        313,5,97,0,0,313,314,5,114,0,0,314,315,5,103,0,0,315,316,5,101,0,
        0,316,317,5,116,0,0,317,78,1,0,0,0,318,319,5,119,0,0,319,320,5,104,
        0,0,320,321,5,105,0,0,321,322,5,108,0,0,322,323,5,101,0,0,323,80,
        1,0,0,0,324,325,5,105,0,0,325,326,5,102,0,0,326,82,1,0,0,0,327,328,
        5,101,0,0,328,329,5,108,0,0,329,330,5,115,0,0,330,331,5,101,0,0,
        331,84,1,0,0,0,332,333,5,114,0,0,333,334,5,101,0,0,334,335,5,116,
        0,0,335,336,5,117,0,0,336,337,5,114,0,0,337,338,5,110,0,0,338,339,
        5,105,0,0,339,340,5,110,0,0,340,341,5,103,0,0,341,86,1,0,0,0,342,
        343,5,105,0,0,343,344,5,110,0,0,344,345,5,108,0,0,345,346,5,105,
        0,0,346,347,5,110,0,0,347,348,5,101,0,0,348,88,1,0,0,0,349,350,5,
        102,0,0,350,351,5,111,0,0,351,352,5,114,0,0,352,353,5,99,0,0,353,
        354,5,101,0,0,354,355,5,100,0,0,355,90,1,0,0,0,356,357,5,111,0,0,
        357,358,5,112,0,0,358,359,5,116,0,0,359,360,5,105,0,0,360,361,5,
        111,0,0,361,362,5,110,0,0,362,363,5,97,0,0,363,364,5,108,0,0,364,
        92,1,0,0,0,365,366,5,114,0,0,366,367,5,101,0,0,367,368,5,116,0,0,
        368,369,5,117,0,0,369,370,5,114,0,0,370,371,5,110,0,0,371,94,1,0,
        0,0,372,373,5,98,0,0,373,374,5,114,0,0,374,375,5,101,0,0,375,376,
        5,97,0,0,376,377,5,107,0,0,377,96,1,0,0,0,378,379,5,99,0,0,379,380,
        5,111,0,0,380,381,5,110,0,0,381,382,5,116,0,0,382,383,5,105,0,0,
        383,384,5,110,0,0,384,385,5,117,0,0,385,386,5,101,0,0,386,98,1,0,
        0,0,387,388,5,112,0,0,388,389,5,114,0,0,389,390,5,111,0,0,390,391,
        5,99,0,0,391,392,5,101,0,0,392,393,5,100,0,0,393,394,5,117,0,0,394,
        395,5,114,0,0,395,396,5,101,0,0,396,100,1,0,0,0,397,398,5,100,0,
        0,398,399,5,111,0,0,399,102,1,0,0,0,400,401,5,98,0,0,401,402,5,101,
        0,0,402,403,5,103,0,0,403,404,5,105,0,0,404,405,5,110,0,0,405,104,
        1,0,0,0,406,407,5,101,0,0,407,408,5,110,0,0,408,409,5,100,0,0,409,
        106,1,0,0,0,410,411,5,118,0,0,411,412,5,97,0,0,412,413,5,114,0,0,
        413,414,5,105,0,0,414,415,5,97,0,0,415,416,5,98,0,0,416,417,5,108,
        0,0,417,418,5,101,0,0,418,108,1,0,0,0,419,420,5,99,0,0,420,421,5,
        111,0,0,421,422,5,110,0,0,422,423,5,115,0,0,423,424,5,116,0,0,424,
        425,5,97,0,0,425,426,5,110,0,0,426,427,5,116,0,0,427,110,1,0,0,0,
        428,429,5,112,0,0,429,430,5,111,0,0,430,431,5,105,0,0,431,432,5,
        110,0,0,432,433,5,116,0,0,433,434,5,101,0,0,434,435,5,114,0,0,435,
        112,1,0,0,0,436,437,5,97,0,0,437,438,5,115,0,0,438,439,5,115,0,0,
        439,440,5,105,0,0,440,441,5,103,0,0,441,442,5,110,0,0,442,443,5,
        101,0,0,443,444,5,100,0,0,444,114,1,0,0,0,445,446,5,97,0,0,446,447,
        5,115,0,0,447,448,5,115,0,0,448,449,5,105,0,0,449,450,5,103,0,0,
        450,451,5,110,0,0,451,116,1,0,0,0,452,453,5,118,0,0,453,454,5,97,
        0,0,454,455,5,108,0,0,455,456,5,117,0,0,456,457,5,101,0,0,457,118,
        1,0,0,0,458,459,5,105,0,0,459,460,5,110,0,0,460,461,5,100,0,0,461,
        462,5,101,0,0,462,463,5,120,0,0,463,120,1,0,0,0,464,465,5,97,0,0,
        465,466,5,116,0,0,466,122,1,0,0,0,467,468,5,110,0,0,468,469,5,111,
        0,0,469,470,5,116,0,0,470,124,1,0,0,0,471,472,5,99,0,0,472,473,5,
        97,0,0,473,474,5,108,0,0,474,475,5,108,0,0,475,126,1,0,0,0,476,477,
        5,115,0,0,477,478,5,105,0,0,478,479,5,122,0,0,479,480,5,101,0,0,
        480,481,5,111,0,0,481,489,5,102,0,0,482,483,5,115,0,0,483,484,5,
        105,0,0,484,485,5,122,0,0,485,486,5,101,0,0,486,487,5,79,0,0,487,
        489,5,102,0,0,488,476,1,0,0,0,488,482,1,0,0,0,489,128,1,0,0,0,490,
        491,5,116,0,0,491,492,5,121,0,0,492,493,5,112,0,0,493,494,5,101,
        0,0,494,130,1,0,0,0,495,496,5,105,0,0,496,497,5,115,0,0,497,132,
        1,0,0,0,498,502,7,5,0,0,499,501,7,6,0,0,500,499,1,0,0,0,501,504,
        1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,134,1,0,0,0,504,502,
        1,0,0,0,505,506,7,7,0,0,506,136,1,0,0,0,15,0,140,150,158,165,170,
        178,186,192,194,208,233,263,488,502,1,6,0,0
    ]

class VerboseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    INLINE_COMMENT = 2
    V_FLOAT = 3
    V_INTEGER = 4
    V_INTEGER_HEX = 5
    V_INTEGER_BIN = 6
    V_STRING = 7
    P_PERIOD = 8
    P_COMMA = 9
    P_SEMIC = 10
    P_ACCESSOR = 11
    L_PARENTHESIS = 12
    R_PARENTHESIS = 13
    L_BRACKET = 14
    R_BRACKET = 15
    L_BRACE = 16
    R_BRACE = 17
    O_PLUS = 18
    O_MINUS = 19
    O_TIMES = 20
    O_DIVIDE = 21
    O_EQUAL = 22
    O_NOT_EQUAL = 23
    O_LESS = 24
    O_GREATER = 25
    O_LESS_EQUAL = 26
    O_GREATER_EQUAL = 27
    O_BIT_AND = 28
    O_BIT_OR = 29
    O_BIT_XOR = 30
    O_BIT_NOT = 31
    NAMED = 32
    FROM = 33
    WITH = 34
    TO = 35
    FUNCTION = 36
    ARGUMENTS = 37
    TARGETS = 38
    TARGET = 39
    WHILE = 40
    IF = 41
    ELSE = 42
    RETURNING = 43
    INLINE = 44
    FORCED = 45
    OPTIONAL = 46
    RETURN = 47
    BREAK = 48
    CONTINUE = 49
    PROCEDURE = 50
    DO = 51
    BEGIN = 52
    END = 53
    VARIABLE = 54
    CONSTANT = 55
    POINTER = 56
    ASSIGNED = 57
    ASSIGN = 58
    VALUE = 59
    INDEX = 60
    AT = 61
    NOT = 62
    CALL = 63
    SIZEOF = 64
    TYPE = 65
    IS = 66
    V_IDENTIFIER = 67

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "','", "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "'+'", "'-'", "'*'", "'/'", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'&'", "'|'", "'^'", "'named'", "'from'", "'with'", "'to'", 
            "'function'", "'arguments'", "'targets'", "'target'", "'while'", 
            "'if'", "'else'", "'returning'", "'inline'", "'forced'", "'optional'", 
            "'return'", "'break'", "'continue'", "'procedure'", "'do'", 
            "'begin'", "'end'", "'variable'", "'constant'", "'pointer'", 
            "'assigned'", "'assign'", "'value'", "'index'", "'at'", "'not'", 
            "'call'", "'type'", "'is'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "INLINE_COMMENT", "V_FLOAT", "V_INTEGER", "V_INTEGER_HEX", 
            "V_INTEGER_BIN", "V_STRING", "P_PERIOD", "P_COMMA", "P_SEMIC", 
            "P_ACCESSOR", "L_PARENTHESIS", "R_PARENTHESIS", "L_BRACKET", 
            "R_BRACKET", "L_BRACE", "R_BRACE", "O_PLUS", "O_MINUS", "O_TIMES", 
            "O_DIVIDE", "O_EQUAL", "O_NOT_EQUAL", "O_LESS", "O_GREATER", 
            "O_LESS_EQUAL", "O_GREATER_EQUAL", "O_BIT_AND", "O_BIT_OR", 
            "O_BIT_XOR", "O_BIT_NOT", "NAMED", "FROM", "WITH", "TO", "FUNCTION", 
            "ARGUMENTS", "TARGETS", "TARGET", "WHILE", "IF", "ELSE", "RETURNING", 
            "INLINE", "FORCED", "OPTIONAL", "RETURN", "BREAK", "CONTINUE", 
            "PROCEDURE", "DO", "BEGIN", "END", "VARIABLE", "CONSTANT", "POINTER", 
            "ASSIGNED", "ASSIGN", "VALUE", "INDEX", "AT", "NOT", "CALL", 
            "SIZEOF", "TYPE", "IS", "V_IDENTIFIER" ]

    ruleNames = [ "WS", "INLINE_COMMENT", "V_FLOAT", "V_INTEGER", "V_INTEGER_HEX", 
                  "V_INTEGER_BIN", "V_STRING", "P_PERIOD", "P_COMMA", "P_SEMIC", 
                  "P_ACCESSOR", "L_PARENTHESIS", "R_PARENTHESIS", "L_BRACKET", 
                  "R_BRACKET", "L_BRACE", "R_BRACE", "O_PLUS", "O_MINUS", 
                  "O_TIMES", "O_DIVIDE", "O_EQUAL", "O_NOT_EQUAL", "O_LESS", 
                  "O_GREATER", "O_LESS_EQUAL", "O_GREATER_EQUAL", "O_BIT_AND", 
                  "O_BIT_OR", "O_BIT_XOR", "O_BIT_NOT", "NAMED", "FROM", 
                  "WITH", "TO", "FUNCTION", "ARGUMENTS", "TARGETS", "TARGET", 
                  "WHILE", "IF", "ELSE", "RETURNING", "INLINE", "FORCED", 
                  "OPTIONAL", "RETURN", "BREAK", "CONTINUE", "PROCEDURE", 
                  "DO", "BEGIN", "END", "VARIABLE", "CONSTANT", "POINTER", 
                  "ASSIGNED", "ASSIGN", "VALUE", "INDEX", "AT", "NOT", "CALL", 
                  "SIZEOF", "TYPE", "IS", "V_IDENTIFIER", "DIGIT" ]

    grammarFileName = "Verbose.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


